dfr_dist <- myDF %>%
count(byGroup) %>%                            # count for parent groups
mutate(`(\\%)` = prop.table(n)*100) %>%   # & percentage in those groups
left_join(dfr_perc, by = 'cyl')           # join to dfr_perc
dfr_dist <- myDF %>%
count(byGroup) %>%                            # count for parent groups
mutate(`(\\%)` = prop.table(n)*100) %>%   # & percentage in those groups
left_join(dfr_perc, by = 'byGroup')           # join to dfr_perc
# 1 digit to distinguish % from n and caption
ztab <- ztable(as.data.frame(dfr_dist), digits = 1
, caption = 'Distribution of Gears by Cylinders')
# name and number column groups
ztab <- addcgroup(ztab, cgroup = c('Cylinders', 'Gear Distribution (\\%)')
, n.cgroup = c(3, ncol(dfr_dist)-3))   # 3 columns & others
ztab
gg_prop <- ggplot(data = data.frame()
, aes(x = byGroup, y = n, fill = UniqueCarrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = n) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'Time', y = NULL, fill = 'Gears',
title = 'Proportions in Sub-groups by Group')  # what's the reader looking at?
#ggplot(myDF, aes(byGroup, OriginAirportID)) + geom_line(aes(group = UniqueCarrier))
gg_prop %+%   dfr_prop
gg_prop <- ggplot(data = data.frame()
, aes(x = byGroup, y = n, fill = UniqueCarrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'Time', y = NULL, fill = 'Gears',
title = 'Proportions in Sub-groups by Group')  # what's the reader looking at?
#ggplot(myDF, aes(byGroup, OriginAirportID)) + geom_line(aes(group = UniqueCarrier))
gg_prop %+%   dfr_prop
# Create dataset with overall count distributions
dfr_prop <- myDF %>%
count(OriginStateName, OriginCityName, UniqueCarrier) %>%     # group_by() & summarise(n=n()) are implicit
mutate(prop = prop.table(n))    # prop = n/sum(n) works too /  prop.table(n)
as.data.frame(dfr_prop)           # strip tbl_df() properties to print
# Create dataset with overall count distributions
dfr_prop <- myDF %>%
count(byGroup, OriginStateName, OriginCityName, UniqueCarrier) %>%     # group_by() & summarise(n=n()) are implicit
mutate(prop = prop.table(n))    # prop = n/sum(n) works too /  prop.table(n)
as.data.frame(dfr_prop)           # strip tbl_df() properties to print
# Create dataset with overall count distributions
dfr_prop <- myDF %>%
count(OriginStateName, OriginCityName, UniqueCarrier) %>%     # group_by() & summarise(n=n()) are implicit
mutate(prop = prop.table(n))    # prop = n/sum(n) works too /  prop.table(n)
as.data.frame(dfr_prop)           # strip tbl df() properties to print
# Create dataset with overall count distributions
dfr_prop <- myDF %>%
count(OriginStateName, OriginCityName, Carrier) %>%     # group_by() & summarise(n=n()) are implicit
mutate(prop = prop.table(n))    # prop = n/sum(n) works too /  prop.table(n)
as.data.frame(dfr_prop)           # strip tbl df() properties to print
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginStateName, y = n, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'Time', y = NULL, fill = 'Gears',
title = 'Proportions in Sub-groups by Group')  # what's the reader looking at?
#ggplot(myDF, aes(byGroup, OriginAirportID)) + geom_line(aes(group = UniqueCarrier))
gg_prop %+%   dfr_prop
# Create dataset with overall count distributions
dfr_prop <- myDF %>%
count(OriginState, OriginCityName, Carrier) %>%     # group_by() & summarise(n=n()) are implicit
mutate(prop = prop.table(n))    # prop = n/sum(n) works too /  prop.table(n)
as.data.frame(dfr_prop)           # strip tbl df() properties to print
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = n, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'Time', y = NULL, fill = 'Gears',
title = 'Proportions in Sub-groups by Group')  # what's the reader looking at?
#ggplot(myDF, aes(byGroup, OriginAirportID)) + geom_line(aes(group = UniqueCarrier))
gg_prop %+%   dfr_prop
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'Time', y = NULL, fill = 'Gears',
title = 'Proportions in Sub-groups by Group')  # what's the reader looking at?
#ggplot(myDF, aes(byGroup, OriginAirportID)) + geom_line(aes(group = UniqueCarrier))
gg_prop %+%   dfr_prop
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'Time', y = NULL, fill = 'Carrier',
title = 'Proportions in Sub-groups by Group')  # what's the reader looking at?
gg_prop %+%   dfr_prop
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier')  # title of graph
gg_prop %+%   dfr_prop
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
# Create dataset with overall count distributions
ds2 <- myDF[ which(myDF$Carrier in("9E","AA","AS","B6","DL","EV","F9"), ]
# Create dataset with overall count distributions
ds2 <- myDF[ which(myDF$Carrier in ("9E","AA","AS","B6","DL","EV","F9"), ]
# Create dataset with overall count distributions
ds2 <- myDF[ which(myDF$Carrier %in% ("9E","AA","AS","B6","DL","EV","F9"), ]
# Create dataset with overall count distributions
ds2 <- myDF[ which(myDF$Carrier %in% c("9E","AA","AS","B6","DL","EV","F9"), ]
# Create dataset with overall count distributions
ds2 <- myDF[ which(myDF$Carrier %in% c("9E","AA","AS","B6","DL","EV","F9")), ]
dfr_prop <- myDF %>%
count(OriginState, OriginCityName, Carrier) %>%     # group_by() & summarise(n=n()) are implicit
mutate(prop = prop.table(n))    # prop = n/sum(n) works too /  prop.table(n)
as.data.frame(dfr_prop)           # strip tbl df() properties to print
# Create dataset with overall count distributions
ds2 <- myDF[ which(myDF$Carrier %in% c("9E","AA","AS","B6","DL","EV","F9")), ]
dfr_prop <- ds2 %>%
count(OriginState, OriginCityName, Carrier) %>%     # group_by() & summarise(n=n()) are implicit
mutate(prop = prop.table(n))    # prop = n/sum(n) works too /  prop.table(n)
as.data.frame(dfr_prop)           # strip tbl df() properties to print
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
# Create dataset with overall count distributions
ds2 <- myDF[ which(myDF$Carrier %in% c("9E","AA","AS","B6","DL","EV","F9")), ]
dfr_prop <- myDF %>%
count(OriginState, OriginCityName, Carrier) %>%     # group_by() & summarise(n=n()) are implicit
mutate(prop = prop.table(n))    # prop = n/sum(n) works too /  prop.table(n)
as.data.frame(dfr_prop)           # strip tbl df() properties to print
# Create dataset with overall count distributions
ds2 <- myDF[ which(myDF$Carrier %in% c("9E","AA","AS","B6","DL","EV","F9")), ]
dfr_prop <- ds2 %>%
count(OriginState, OriginCityName, Carrier) %>%     # group_by() & summarise(n=n()) are implicit
mutate(prop = prop.table(n))    # prop = n/sum(n) works too /  prop.table(n)
as.data.frame(dfr_prop)           # strip tbl df() properties to print
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
dfr_perc <- ds2 %>%
count(byGroup, OriginStateName, OriginCityName, UniqueCarrier) %>%
mutate(perc = prop.table(n)*100) %>%      # mutate count(n) into perc
select(-n) %>%                            # remove the count...
spread(UniqueCarrier, perc)                        # to spread perc by subgroup
as.data.frame(dfr_perc)
dfr_dist <- myDF %>%
count(byGroup) %>%                            # count for parent groups
mutate(`(\\%)` = prop.table(n)*100) %>%   # & percentage in those groups
left_join(dfr_perc, by = 'byGroup')           # join to dfr_perc
# 1 digit to distinguish % from n and caption
ztab <- ztable(as.data.frame(dfr_dist), digits = 1
, caption = 'Distribution of Gears by Cylinders')
# name and number column groups
ztab <- addcgroup(ztab, cgroup = c('Cylinders', 'Gear Distribution (\\%)')
, n.cgroup = c(3, ncol(dfr_dist)-3))   # 3 columns & others
ztab
dfr_perc <- ds2 %>%
count(OriginState, OriginCityName, Carrier) %>%
mutate(perc = prop.table(n)*100) %>%      # mutate count(n) into perc
select(-n) %>%                            # remove the count...
spread(Carrier, perc)                     # to spread perc by subgroup
as.data.frame(dfr_perc)
dfr_dist <- ds2 %>%
count(OriginState) %>%                            # count for parent groups
mutate(`(\\%)` = prop.table(n)*100) %>%           # & percentage in those groups
left_join(dfr_perc, by = 'OriginState')           # join to dfr_perc
# 1 digit to distinguish % from n and caption
ztab <- ztable(as.data.frame(dfr_dist), digits = 1
, caption = 'Distribution of Gears by Cylinders')
# name and number column groups
ztab <- addcgroup(ztab, cgroup = c('Cylinders', 'Gear Distribution (\\%)')
, n.cgroup = c(3, ncol(dfr_dist)-3))   # 3 columns & others
ztab
dfr_dist <- ds2 %>%
count(OriginState) %>%                            # count for parent groups
mutate(`(\\%)` = prop.table(n)*100) %>%           # & percentage in those groups
left_join(dfr_perc, by = 'OriginState')           # join to dfr_perc
# 1 digit to distinguish % from n and caption
ztab <- ztable(as.data.frame(dfr_dist), digits = 1
, caption = 'Distribution of Gears by Cylinders')
# name and number column groups
ztab <- addcgroup(ztab, cgroup = c('Cylinders', 'Gear Distribution (\\%)')
, n.cgroup = c(3, ncol(dfr_dist)-3))   # 3 columns & others
ztab
View(dfr_prop)
View(dfr_prop)
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_x_discrete(breaks=c("AK", "CA" "UT","WY")  )
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_x_discrete(breaks=c("AK", "CA", "UT","WY")  ) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_x_discrete(breaks=c("AK", "CA","NY","UT","WY")  ) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_x_discrete(breaks=c("AK", "CA","LA","NY","UT","WY")  ) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_x_discrete(breaks=c("AK", "CA","FL", "LA","NY","UT","WY")  ) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_x_discrete(breaks=c("AK", "CA","FL","IL", "LA","MI","NY","UT","WY")  ) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_x_discrete(breaks=c("AK", "CA","FL","GA"," IL", "LA","MI","NY","UT","WY")  ) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_x_discrete(breaks=c("AK", "CA","FL", "IL", "LA","MI","NY","UT","WY")  ) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_x_discrete(breaks=c("AK", "CA","FL", "IL", "LA","MI","MO", "NY","UT","WY")  ) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_x_discrete(breaks=c("AK", "CA","FL", "IL", "LA","MI","MO", "NY","UT","WY")  ) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_x_discrete(breaks=c("AK", "CA","FL", "IL", "LA","MI","MO", "NY","TX","UT","WY")  ) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_x_discrete(breaks=c("AK", "CA","FL", "IL", "LA","MI","MO", "NY","TX","WY")  ) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_x_discrete(breaks=c("AK", "CA","FL", "IL", "LA","MI","MO", "NY","PA","TX","WY")  ) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
# Create dataset with overall count distributions
ds2 <- myDF[ which(myDF$Carrier %in% c("9E","AA","AS","B6","DL","EV","F9")), ]
dfr_prop <- ds2 %>%
count(OriginState, Carrier) %>%     # group_by() & summarise(n=n()) are implicit
mutate(prop = prop.table(n))    # prop = n/sum(n) works too /  prop.table(n)
as.data.frame(dfr_prop)           # strip tbl df() properties to print
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_x_discrete(breaks=c("AK", "CA","FL", "IL", "LA","MI","MO", "NY","PA","TX","WY")  ) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'dodge', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_x_discrete(breaks=c("AK", "CA","FL", "IL", "GA","LA","MI","MO", "NY","PA","TX","WY")  ) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'stack', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_x_discrete(breaks=c("AK", "CA","FL", "IL", "GA","LA","MI","MO", "NY","PA","TX","WY")  ) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'stack', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'stack', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_x_discrete(breaks=c("AK", "CA","FL", "IL", "GA","LA","MI","MO", "NY","PA","TX","WY")  ) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'stack', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_x_discrete(breaks=c("AK", "CA","FL", "IL", "GA","LA","MI","MO", "OH", "NY","PA","TX","WY")  ) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'stack', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_x_discrete(breaks=c("AK", "CA","FL", "IL", "GA","LA","MI","MO", "OH", "NJ", "NY","PA","TX","WY")  ) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'stack', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_x_discrete(breaks=c("AK", "CA","FL", "IL", "GA","LA","MI","MO","NC","OH", "NJ","NY","PA","TX","WY")  ) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
# Create dataset with overall count distributions
ds2 <- myDF[ which(myDF$Carrier %in% c("9E","AA","AS","B6","DL","EV","F9")), ]
dfr_prop <- ds2 %>%
count(OriginState, Carrier) %>%  # group_by() & summarise(n=n()) are implicit
mutate(prop = prop.table(n))     # prop = n/sum(n) works too /  prop.table(n)
as.data.frame(dfr_prop)            # print df
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'stack', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_x_discrete(breaks=c("AK", "CA","FL", "IL", "GA","LA","MI","MO","NC","OH", "NJ","NY","PA","TX","WY")  ) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
# Define library packages to use and pre-install
# These two packages must be installed at first if not already installed.
#install.packages("tidyverse", dependencies=TRUE)
#install.packages("plotly")
library(dplyr,verbose = getOption("verbose"))
library(tidyr)    # for reshaping data
library(scales)     # for scale_y_continuous(label = percent)
library(ggthemes)   # for scale_fill_few('medium')
library(ggplot2)    # plotting data
library(ztable)     # format tables for reporting
library(tidyverse)
library(plotly)     # for interactive charts
# Define library packages to use and pre-install
# These two packages must be installed at first if not already installed.
#install.packages("tidyverse", dependencies=TRUE)
#install.packages("plotly")
library(dplyr,verbose = getOption("verbose"))
library(tidyr)    # for reshaping data
library(scales)     # for scale_y_continuous(label = percent)
library(ggthemes)   # for scale_fill_few('medium')
library(ggplot2)    # plotting data
library(ztable)     # format tables for reporting
library(tidyverse)
library(plotly)     # for interactive charts
# Define library packages to use and pre-install
# These two packages must be installed at first if not already installed.
#install.packages("tidyverse", dependencies=TRUE)
#install.packages("plotly")
library(dplyr,verbose = getOption("verbose"))
library(tidyr)    # for reshaping data
library(scales)     # for scale_y_continuous(label = percent)
library(ggthemes)   # for scale_fill_few('medium')
library(ggplot2)    # plotting data
library(ztable)     # format tables for reporting
library(tidyverse)
library(plotly)     # for interactive charts
#read in the raw dataset
airports <- read.csv("C:/Users/Luciana/CEBD1261/Dataset/On_Time_Performance_2018.csv", header = TRUE)
# view summary for unusual data values
summary(airports$DepTime)
# Remove the rows by checking if not (!) an NA due to not meeting the date format
temp<- airports[!is.na(strptime(airports$DepTime, format = "%H%M")),]
class(temp$DepTime)
#Split time series data into time intervals by every 15 minutes and then plot the count
myDF<- mutate(temp, byGroup = as.matrix(cut(strptime(sub("(\\d+)(\\d{2})", "\\1:\\2", temp$DepTime), format = "%H:%M"), breaks="15 min") ))
# unique(myDF$byGroup) #check unique values
# Extract time value from variable and make dataframes used for graphs and summary table
myDF["Time"] <- NA # This creates the new column filled with "NA"
myDF$Time <- strftime(as.POSIXlt(myDF$byGroup), format="%H:%M")
# based on variable values
ds1 <- myDF[ which(myDF$DayofMonth == 1 & myDF$OriginState=="NY"), ]
ds1[with(ds1, order(Time)), ]
# Prepare dataset and pipe the dataset into the graph
graph1 <- ds1 %>%
ggplot(aes(x = Time, y = Origin, group=OriginStateName, color = Carrier)) +
geom_point() +  scale_x_discrete(breaks=c("00:00", "11:00", "12:00", "14:00","16:00","18:00", "20:00","23:00")  )
labs(title = "New York State Airport Departures by Time Intervals",
subtitle = "*The data frame is sent to the plot using pipes",
y = "Airport Origin code",
x = "Departure Time") + theme_bw(base_size = 8) +
theme(axis.ticks = element_blank(), axis.text.x = element_blank())
#printout graph #1
graph1
ggplotly(graph1)
# Create dataset with overall count distributions
ds2 <- myDF[ which(myDF$Carrier %in% c("9E","AA","AS","B6","DL","EV","F9")), ]
dfr_prop <- ds2 %>%
count(OriginState, Carrier) %>%  # group_by() & summarise(n=n()) are implicit
mutate(prop = prop.table(n))     # prop = n/sum(n) works too /  prop.table(n)
as.data.frame(dfr_prop)            # print df
gg_prop <- ggplot(data = data.frame()
, aes(x =OriginState, y = prop, fill = Carrier)) +
geom_bar(stat = 'identity', position = 'stack', alpha = 2/3) +
scale_y_continuous(labels = percent) +
scale_x_discrete(breaks=c("AK", "CA","FL", "IL", "GA","LA","MI","MO","NC","OH", "NJ","NY","PA","TX","WY")  ) +
scale_fill_few('medium', drop = FALSE) +            # keep levels, if data is filtered
labs(x = 'State', y = NULL, fill = 'Carrier',
title = 'Distribution of Flights by State and Carrier for Month of January')  # title of graph
gg_prop %+%   dfr_prop
